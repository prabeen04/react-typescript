// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Landing /> should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Landing />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="welcome-text-container"
        >
          <ForwardRef
            style={
              Object {
                "opacity": AnimatedValue {
                  "animatedStyles": Set {},
                  "children": Array [],
                  "done": false,
                  "lastPosition": 0,
                  "lastTime": undefined,
                  "lastVelocity": undefined,
                  "payload": undefined,
                  "setValue": [Function],
                  "startPosition": 0,
                  "startTime": 1554262248036,
                  "value": 0,
                },
                "rotate": AnimatedInterpolation {
                  "attach": [Function],
                  "calc": [Function],
                  "children": Array [],
                  "detach": [Function],
                  "payload": Array [
                    AnimatedValue {
                      "animatedStyles": Set {},
                      "children": Array [],
                      "done": false,
                      "lastPosition": 0,
                      "lastTime": undefined,
                      "lastVelocity": undefined,
                      "payload": undefined,
                      "setValue": [Function],
                      "startPosition": 0,
                      "startTime": 1554262248036,
                      "value": 0,
                    },
                  ],
                },
                "transform": AnimatedInterpolation {
                  "attach": [Function],
                  "calc": [Function],
                  "children": Array [],
                  "detach": [Function],
                  "payload": Array [
                    AnimatedValue {
                      "animatedStyles": Set {},
                      "children": Array [],
                      "done": false,
                      "lastPosition": 0,
                      "lastTime": undefined,
                      "lastVelocity": undefined,
                      "payload": undefined,
                      "setValue": [Function],
                      "startPosition": 0,
                      "startTime": 1554262248036,
                      "value": 0,
                    },
                  ],
                },
              }
            }
          >
            <React.Fragment>
              <h1
                className="welcome-text"
              >
                Let's explore the
                <React.Fragment>
                  <Title
                    title=" POWER "
                  />
                </React.Fragment>
                of typescript
              </h1>
            </React.Fragment>
          </ForwardRef>
        </div>,
        <ForwardRef
          style={
            Object {
              "opacity": AnimatedValue {
                "animatedStyles": Set {},
                "children": Array [],
                "done": false,
                "lastPosition": 0,
                "lastTime": undefined,
                "lastVelocity": undefined,
                "payload": undefined,
                "setValue": [Function],
                "startPosition": 0,
                "startTime": 1554262248037,
                "value": 0,
              },
            }
          }
        >
          <div
            className="feature-card-list"
          >
            <Card
              card={
                Object {
                  "action": "/counter",
                  "description": "Explore the Counter ",
                  "title": "Counter",
                }
              }
            />
            <Card
              card={
                Object {
                  "action": "/todo",
                  "description": "Explore the Todo ",
                  "title": "Todo",
                }
              }
            />
            <Card
              card={
                Object {
                  "action": "/fetch",
                  "description": "Explore the Users ",
                  "title": "Users",
                }
              }
            />
          </div>
        </ForwardRef>,
      ],
      "className": "landing-wrapper",
      "data-test": "Landing",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <ForwardRef
            style={
              Object {
                "opacity": AnimatedValue {
                  "animatedStyles": Set {},
                  "children": Array [],
                  "done": false,
                  "lastPosition": 0,
                  "lastTime": undefined,
                  "lastVelocity": undefined,
                  "payload": undefined,
                  "setValue": [Function],
                  "startPosition": 0,
                  "startTime": 1554262248036,
                  "value": 0,
                },
                "rotate": AnimatedInterpolation {
                  "attach": [Function],
                  "calc": [Function],
                  "children": Array [],
                  "detach": [Function],
                  "payload": Array [
                    AnimatedValue {
                      "animatedStyles": Set {},
                      "children": Array [],
                      "done": false,
                      "lastPosition": 0,
                      "lastTime": undefined,
                      "lastVelocity": undefined,
                      "payload": undefined,
                      "setValue": [Function],
                      "startPosition": 0,
                      "startTime": 1554262248036,
                      "value": 0,
                    },
                  ],
                },
                "transform": AnimatedInterpolation {
                  "attach": [Function],
                  "calc": [Function],
                  "children": Array [],
                  "detach": [Function],
                  "payload": Array [
                    AnimatedValue {
                      "animatedStyles": Set {},
                      "children": Array [],
                      "done": false,
                      "lastPosition": 0,
                      "lastTime": undefined,
                      "lastVelocity": undefined,
                      "payload": undefined,
                      "setValue": [Function],
                      "startPosition": 0,
                      "startTime": 1554262248036,
                      "value": 0,
                    },
                  ],
                },
              }
            }
          >
            <React.Fragment>
              <h1
                className="welcome-text"
              >
                Let's explore the
                <React.Fragment>
                  <Title
                    title=" POWER "
                  />
                </React.Fragment>
                of typescript
              </h1>
            </React.Fragment>
          </ForwardRef>,
          "className": "welcome-text-container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <React.Fragment>
              <h1
                className="welcome-text"
              >
                Let's explore the
                <React.Fragment>
                  <Title
                    title=" POWER "
                  />
                </React.Fragment>
                of typescript
              </h1>
            </React.Fragment>,
            "style": Object {
              "opacity": AnimatedValue {
                "animatedStyles": Set {},
                "children": Array [],
                "done": false,
                "lastPosition": 0,
                "lastTime": undefined,
                "lastVelocity": undefined,
                "payload": undefined,
                "setValue": [Function],
                "startPosition": 0,
                "startTime": 1554262248036,
                "value": 0,
              },
              "rotate": AnimatedInterpolation {
                "attach": [Function],
                "calc": [Function],
                "children": Array [],
                "detach": [Function],
                "payload": Array [
                  AnimatedValue {
                    "animatedStyles": Set {},
                    "children": Array [],
                    "done": false,
                    "lastPosition": 0,
                    "lastTime": undefined,
                    "lastVelocity": undefined,
                    "payload": undefined,
                    "setValue": [Function],
                    "startPosition": 0,
                    "startTime": 1554262248036,
                    "value": 0,
                  },
                ],
              },
              "transform": AnimatedInterpolation {
                "attach": [Function],
                "calc": [Function],
                "children": Array [],
                "detach": [Function],
                "payload": Array [
                  AnimatedValue {
                    "animatedStyles": Set {},
                    "children": Array [],
                    "done": false,
                    "lastPosition": 0,
                    "lastTime": undefined,
                    "lastVelocity": undefined,
                    "payload": undefined,
                    "setValue": [Function],
                    "startPosition": 0,
                    "startTime": 1554262248036,
                    "value": 0,
                  },
                ],
              },
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <h1
                className="welcome-text"
              >
                Let's explore the
                <React.Fragment>
                  <Title
                    title=" POWER "
                  />
                </React.Fragment>
                of typescript
              </h1>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Let's explore the",
                  <React.Fragment>
                    <Title
                      title=" POWER "
                    />
                  </React.Fragment>,
                  "of typescript",
                ],
                "className": "welcome-text",
              },
              "ref": null,
              "rendered": Array [
                "Let's explore the",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <Title
                      title=" POWER "
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "title": " POWER ",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": Symbol(react.fragment),
                },
                "of typescript",
              ],
              "type": "h1",
            },
            "type": Symbol(react.fragment),
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <div
            className="feature-card-list"
          >
            <Card
              card={
                Object {
                  "action": "/counter",
                  "description": "Explore the Counter ",
                  "title": "Counter",
                }
              }
            />
            <Card
              card={
                Object {
                  "action": "/todo",
                  "description": "Explore the Todo ",
                  "title": "Todo",
                }
              }
            />
            <Card
              card={
                Object {
                  "action": "/fetch",
                  "description": "Explore the Users ",
                  "title": "Users",
                }
              }
            />
          </div>,
          "style": Object {
            "opacity": AnimatedValue {
              "animatedStyles": Set {},
              "children": Array [],
              "done": false,
              "lastPosition": 0,
              "lastTime": undefined,
              "lastVelocity": undefined,
              "payload": undefined,
              "setValue": [Function],
              "startPosition": 0,
              "startTime": 1554262248037,
              "value": 0,
            },
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Card
                card={
                  Object {
                    "action": "/counter",
                    "description": "Explore the Counter ",
                    "title": "Counter",
                  }
                }
              />,
              <Card
                card={
                  Object {
                    "action": "/todo",
                    "description": "Explore the Todo ",
                    "title": "Todo",
                  }
                }
              />,
              <Card
                card={
                  Object {
                    "action": "/fetch",
                    "description": "Explore the Users ",
                    "title": "Users",
                  }
                }
              />,
            ],
            "className": "feature-card-list",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "function",
              "props": Object {
                "card": Object {
                  "action": "/counter",
                  "description": "Explore the Counter ",
                  "title": "Counter",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "function",
              "props": Object {
                "card": Object {
                  "action": "/todo",
                  "description": "Explore the Todo ",
                  "title": "Todo",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "function",
              "props": Object {
                "card": Object {
                  "action": "/fetch",
                  "description": "Explore the Users ",
                  "title": "Users",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "render": [Function],
        },
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="welcome-text-container"
          >
            <ForwardRef
              style={
                Object {
                  "opacity": AnimatedValue {
                    "animatedStyles": Set {},
                    "children": Array [],
                    "done": false,
                    "lastPosition": 0,
                    "lastTime": undefined,
                    "lastVelocity": undefined,
                    "payload": undefined,
                    "setValue": [Function],
                    "startPosition": 0,
                    "startTime": 1554262248036,
                    "value": 0,
                  },
                  "rotate": AnimatedInterpolation {
                    "attach": [Function],
                    "calc": [Function],
                    "children": Array [],
                    "detach": [Function],
                    "payload": Array [
                      AnimatedValue {
                        "animatedStyles": Set {},
                        "children": Array [],
                        "done": false,
                        "lastPosition": 0,
                        "lastTime": undefined,
                        "lastVelocity": undefined,
                        "payload": undefined,
                        "setValue": [Function],
                        "startPosition": 0,
                        "startTime": 1554262248036,
                        "value": 0,
                      },
                    ],
                  },
                  "transform": AnimatedInterpolation {
                    "attach": [Function],
                    "calc": [Function],
                    "children": Array [],
                    "detach": [Function],
                    "payload": Array [
                      AnimatedValue {
                        "animatedStyles": Set {},
                        "children": Array [],
                        "done": false,
                        "lastPosition": 0,
                        "lastTime": undefined,
                        "lastVelocity": undefined,
                        "payload": undefined,
                        "setValue": [Function],
                        "startPosition": 0,
                        "startTime": 1554262248036,
                        "value": 0,
                      },
                    ],
                  },
                }
              }
            >
              <React.Fragment>
                <h1
                  className="welcome-text"
                >
                  Let's explore the
                  <React.Fragment>
                    <Title
                      title=" POWER "
                    />
                  </React.Fragment>
                  of typescript
                </h1>
              </React.Fragment>
            </ForwardRef>
          </div>,
          <ForwardRef
            style={
              Object {
                "opacity": AnimatedValue {
                  "animatedStyles": Set {},
                  "children": Array [],
                  "done": false,
                  "lastPosition": 0,
                  "lastTime": undefined,
                  "lastVelocity": undefined,
                  "payload": undefined,
                  "setValue": [Function],
                  "startPosition": 0,
                  "startTime": 1554262248037,
                  "value": 0,
                },
              }
            }
          >
            <div
              className="feature-card-list"
            >
              <Card
                card={
                  Object {
                    "action": "/counter",
                    "description": "Explore the Counter ",
                    "title": "Counter",
                  }
                }
              />
              <Card
                card={
                  Object {
                    "action": "/todo",
                    "description": "Explore the Todo ",
                    "title": "Todo",
                  }
                }
              />
              <Card
                card={
                  Object {
                    "action": "/fetch",
                    "description": "Explore the Users ",
                    "title": "Users",
                  }
                }
              />
            </div>
          </ForwardRef>,
        ],
        "className": "landing-wrapper",
        "data-test": "Landing",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <ForwardRef
              style={
                Object {
                  "opacity": AnimatedValue {
                    "animatedStyles": Set {},
                    "children": Array [],
                    "done": false,
                    "lastPosition": 0,
                    "lastTime": undefined,
                    "lastVelocity": undefined,
                    "payload": undefined,
                    "setValue": [Function],
                    "startPosition": 0,
                    "startTime": 1554262248036,
                    "value": 0,
                  },
                  "rotate": AnimatedInterpolation {
                    "attach": [Function],
                    "calc": [Function],
                    "children": Array [],
                    "detach": [Function],
                    "payload": Array [
                      AnimatedValue {
                        "animatedStyles": Set {},
                        "children": Array [],
                        "done": false,
                        "lastPosition": 0,
                        "lastTime": undefined,
                        "lastVelocity": undefined,
                        "payload": undefined,
                        "setValue": [Function],
                        "startPosition": 0,
                        "startTime": 1554262248036,
                        "value": 0,
                      },
                    ],
                  },
                  "transform": AnimatedInterpolation {
                    "attach": [Function],
                    "calc": [Function],
                    "children": Array [],
                    "detach": [Function],
                    "payload": Array [
                      AnimatedValue {
                        "animatedStyles": Set {},
                        "children": Array [],
                        "done": false,
                        "lastPosition": 0,
                        "lastTime": undefined,
                        "lastVelocity": undefined,
                        "payload": undefined,
                        "setValue": [Function],
                        "startPosition": 0,
                        "startTime": 1554262248036,
                        "value": 0,
                      },
                    ],
                  },
                }
              }
            >
              <React.Fragment>
                <h1
                  className="welcome-text"
                >
                  Let's explore the
                  <React.Fragment>
                    <Title
                      title=" POWER "
                    />
                  </React.Fragment>
                  of typescript
                </h1>
              </React.Fragment>
            </ForwardRef>,
            "className": "welcome-text-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <React.Fragment>
                <h1
                  className="welcome-text"
                >
                  Let's explore the
                  <React.Fragment>
                    <Title
                      title=" POWER "
                    />
                  </React.Fragment>
                  of typescript
                </h1>
              </React.Fragment>,
              "style": Object {
                "opacity": AnimatedValue {
                  "animatedStyles": Set {},
                  "children": Array [],
                  "done": false,
                  "lastPosition": 0,
                  "lastTime": undefined,
                  "lastVelocity": undefined,
                  "payload": undefined,
                  "setValue": [Function],
                  "startPosition": 0,
                  "startTime": 1554262248036,
                  "value": 0,
                },
                "rotate": AnimatedInterpolation {
                  "attach": [Function],
                  "calc": [Function],
                  "children": Array [],
                  "detach": [Function],
                  "payload": Array [
                    AnimatedValue {
                      "animatedStyles": Set {},
                      "children": Array [],
                      "done": false,
                      "lastPosition": 0,
                      "lastTime": undefined,
                      "lastVelocity": undefined,
                      "payload": undefined,
                      "setValue": [Function],
                      "startPosition": 0,
                      "startTime": 1554262248036,
                      "value": 0,
                    },
                  ],
                },
                "transform": AnimatedInterpolation {
                  "attach": [Function],
                  "calc": [Function],
                  "children": Array [],
                  "detach": [Function],
                  "payload": Array [
                    AnimatedValue {
                      "animatedStyles": Set {},
                      "children": Array [],
                      "done": false,
                      "lastPosition": 0,
                      "lastTime": undefined,
                      "lastVelocity": undefined,
                      "payload": undefined,
                      "setValue": [Function],
                      "startPosition": 0,
                      "startTime": 1554262248036,
                      "value": 0,
                    },
                  ],
                },
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <h1
                  className="welcome-text"
                >
                  Let's explore the
                  <React.Fragment>
                    <Title
                      title=" POWER "
                    />
                  </React.Fragment>
                  of typescript
                </h1>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Let's explore the",
                    <React.Fragment>
                      <Title
                        title=" POWER "
                      />
                    </React.Fragment>,
                    "of typescript",
                  ],
                  "className": "welcome-text",
                },
                "ref": null,
                "rendered": Array [
                  "Let's explore the",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": <Title
                        title=" POWER "
                      />,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "title": " POWER ",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": Symbol(react.fragment),
                  },
                  "of typescript",
                ],
                "type": "h1",
              },
              "type": Symbol(react.fragment),
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "render": [Function],
            },
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <div
              className="feature-card-list"
            >
              <Card
                card={
                  Object {
                    "action": "/counter",
                    "description": "Explore the Counter ",
                    "title": "Counter",
                  }
                }
              />
              <Card
                card={
                  Object {
                    "action": "/todo",
                    "description": "Explore the Todo ",
                    "title": "Todo",
                  }
                }
              />
              <Card
                card={
                  Object {
                    "action": "/fetch",
                    "description": "Explore the Users ",
                    "title": "Users",
                  }
                }
              />
            </div>,
            "style": Object {
              "opacity": AnimatedValue {
                "animatedStyles": Set {},
                "children": Array [],
                "done": false,
                "lastPosition": 0,
                "lastTime": undefined,
                "lastVelocity": undefined,
                "payload": undefined,
                "setValue": [Function],
                "startPosition": 0,
                "startTime": 1554262248037,
                "value": 0,
              },
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Card
                  card={
                    Object {
                      "action": "/counter",
                      "description": "Explore the Counter ",
                      "title": "Counter",
                    }
                  }
                />,
                <Card
                  card={
                    Object {
                      "action": "/todo",
                      "description": "Explore the Todo ",
                      "title": "Todo",
                    }
                  }
                />,
                <Card
                  card={
                    Object {
                      "action": "/fetch",
                      "description": "Explore the Users ",
                      "title": "Users",
                    }
                  }
                />,
              ],
              "className": "feature-card-list",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "0",
                "nodeType": "function",
                "props": Object {
                  "card": Object {
                    "action": "/counter",
                    "description": "Explore the Counter ",
                    "title": "Counter",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "1",
                "nodeType": "function",
                "props": Object {
                  "card": Object {
                    "action": "/todo",
                    "description": "Explore the Todo ",
                    "title": "Todo",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "2",
                "nodeType": "function",
                "props": Object {
                  "card": Object {
                    "action": "/fetch",
                    "description": "Explore the Users ",
                    "title": "Users",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
