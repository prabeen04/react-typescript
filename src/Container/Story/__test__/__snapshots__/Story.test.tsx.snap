// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Story/> should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Story />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Context.Provider
        value={
          Object {
            "dispatch": [Function],
            "state": Object {
              "addStoryModal": false,
              "selectedStory": null,
            },
          }
        }
      >
        <div
          className="story-wrapper"
          data-test="Story"
        >
          <div
            className="story-list"
          >
            <StoryList />
          </div>
          <AddStoryModal />
        </div>
      </Context.Provider>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <div
          className="story-wrapper"
          data-test="Story"
        >
          <div
            className="story-list"
          >
            <StoryList />
          </div>
          <AddStoryModal />
        </div>,
        "value": Object {
          "dispatch": [Function],
          "state": Object {
            "addStoryModal": false,
            "selectedStory": null,
          },
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="story-list"
            >
              <StoryList />
            </div>,
            <AddStoryModal />,
          ],
          "className": "story-wrapper",
          "data-test": "Story",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <StoryList />,
              "className": "story-list",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": Object {
        "$$typeof": Symbol(react.provider),
        "_context": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": Object {
            "$$typeof": Symbol(react.context),
            "_calculateChangedBits": null,
            "_context": [Circular],
          },
          "Provider": [Circular],
          "_calculateChangedBits": null,
          "_currentRenderer": null,
          "_currentRenderer2": null,
          "_currentValue": Object {
            "addStoryModal": false,
            "selectedStory": null,
          },
          "_currentValue2": Object {
            "addStoryModal": false,
            "selectedStory": null,
          },
          "_threadCount": 0,
        },
      },
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Context.Provider
          value={
            Object {
              "dispatch": [Function],
              "state": Object {
                "addStoryModal": false,
                "selectedStory": null,
              },
            }
          }
        >
          <div
            className="story-wrapper"
            data-test="Story"
          >
            <div
              className="story-list"
            >
              <StoryList />
            </div>
            <AddStoryModal />
          </div>
        </Context.Provider>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <div
            className="story-wrapper"
            data-test="Story"
          >
            <div
              className="story-list"
            >
              <StoryList />
            </div>
            <AddStoryModal />
          </div>,
          "value": Object {
            "dispatch": [Function],
            "state": Object {
              "addStoryModal": false,
              "selectedStory": null,
            },
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="story-list"
              >
                <StoryList />
              </div>,
              <AddStoryModal />,
            ],
            "className": "story-wrapper",
            "data-test": "Story",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <StoryList />,
                "className": "story-list",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": Object {
          "$$typeof": Symbol(react.provider),
          "_context": Object {
            "$$typeof": Symbol(react.context),
            "Consumer": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": [Circular],
            "_calculateChangedBits": null,
            "_currentRenderer": null,
            "_currentRenderer2": null,
            "_currentValue": Object {
              "addStoryModal": false,
              "selectedStory": null,
            },
            "_currentValue2": Object {
              "addStoryModal": false,
              "selectedStory": null,
            },
            "_threadCount": 0,
          },
        },
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
